#!/usr/bin/env python

# BebopArdrone3.cfg
# auto-generated from https://raw.githubusercontent.com/Parrot-Developers/arsdk-xml/ab28dab91845cd36c4d7002b55f70805deaff3c8/xml/ardrone3.xml
# Do not modify this file by hand. Check scripts/meta folder for generator files.

PACKAGE = "bebop_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Piloting Settings commands
pilotingsettings_group_gen = gen.add_group("pilotingsettings")
# Set max altitude.\n The drone will not fly over this max altitude when it is in manual piloting.\n Please note that if you set a max altitude which is below the current drone altitude, the drone will not go to given max altitude.\n You can get the bounds in the event [MaxAltitude](#1-6-0).
pilotingsettings_group_gen.add("PilotingSettingsMaxAltitudeCurrent", double_t, 0, "Current altitude max in m", 0 , 0, 160)
# Set max pitch/roll.\n This represent the max inclination allowed by the drone.\n You can get the bounds with the commands [MaxPitchRoll](#1-6-1).
pilotingsettings_group_gen.add("PilotingSettingsMaxTiltCurrent", double_t, 0, "Current tilt max in degree", 0 , -180.0, 180.0)
# Set absolut control.
PilotingSettingsAbsolutControlOn_enum = gen.enum([
    gen.const("PilotingSettingsAbsolutControlOn_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsAbsolutControlOn_ON", int_t, 1, "Enabled"),
], "1 to enable, 0 to disable")
pilotingsettings_group_gen.add("PilotingSettingsAbsolutControlOn", int_t, 0, "1 to enable, 0 to disable", 0, 0, 1, edit_method=PilotingSettingsAbsolutControlOn_enum)
# Set max distance.\n You can get the bounds from the event [MaxDistance](#1-6-3).\n\n If [Geofence](#1-6-4) is activated, the drone wont fly over the given max distance.
pilotingsettings_group_gen.add("PilotingSettingsMaxDistanceValue", double_t, 0, "Current max distance in meter", 0 , 0.0, 2000.0)
# Enable geofence.\n If geofence is enabled, the drone wont fly over the given max distance.\n You can get the max distance from the event [MaxDistance](#1-6-3). \n For copters: the distance is computed from the controller position, if this position is not known, it will use the take off.\n For fixed wings: the distance is computed from the take off position.
PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_enum = gen.enum([
    gen.const("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_ON", int_t, 1, "Enabled"),
], "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done")
pilotingsettings_group_gen.add("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover", int_t, 0, "1 if the drone cant fly further than max distance, 0 if no limitation on the drone should be done", 0, 0, 1, edit_method=PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover_enum)
# Set banked turn mode.\n When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.
PilotingSettingsBankedTurnValue_enum = gen.enum([
    gen.const("PilotingSettingsBankedTurnValue_OFF", int_t, 0, "Disabled"),
    gen.const("PilotingSettingsBankedTurnValue_ON", int_t, 1, "Enabled"),
], "1 to enable, 0 to disable")
pilotingsettings_group_gen.add("PilotingSettingsBankedTurnValue", int_t, 0, "1 to enable, 0 to disable", 0, 0, 1, edit_method=PilotingSettingsBankedTurnValue_enum)
# Set minimum altitude.\n Only available for fixed wings.
pilotingsettings_group_gen.add("PilotingSettingsMinAltitudeCurrent", double_t, 0, "Current altitude min in m", 0 , 0, 160)
# Set default circling direction. This direction will be used when the drone use an automatic circling or when [CIRCLE](#1-0-9) is sent with direction *default*.\n Only available for fixed wings.
PilotingSettingsCirclingDirectionValue_enum = gen.enum([
    gen.const("PilotingSettingsCirclingDirectionValue_CW", int_t, 0, "Circling ClockWise"),
    gen.const("PilotingSettingsCirclingDirectionValue_CCW", int_t, 1, "Circling Counter ClockWise"),
], "The circling direction")
pilotingsettings_group_gen.add("PilotingSettingsCirclingDirectionValue", int_t, 0, "The circling direction", 0, 0, 1, edit_method=PilotingSettingsCirclingDirectionValue_enum)
# Set circling radius.\n Only available for fixed wings.
pilotingsettings_group_gen.add("PilotingSettingsCirclingRadiusValue", int_t, 0, "The circling radius in meter", 0 , 0, 160)
# Set min circling altitude (not used during take off).\n Only available for fixed wings.
pilotingsettings_group_gen.add("PilotingSettingsCirclingAltitudeValue", int_t, 0, "The circling altitude in meter", 0 , 0, 160)
# Set pitch mode.\n Only available for fixed wings.
PilotingSettingsPitchModeValue_enum = gen.enum([
    gen.const("PilotingSettingsPitchModeValue_NORMAL", int_t, 0, "Positive pitch values will make the drone lower its nose. Negative pitch values will make the drone raise its nose."),
    gen.const("PilotingSettingsPitchModeValue_INVERTED", int_t, 1, "Pitch commands are inverted. Positive pitch values will make the drone raise its nose. Negative pitch values will make the drone lower its nose."),
], "The Pitch mode")
pilotingsettings_group_gen.add("PilotingSettingsPitchModeValue", int_t, 0, "The Pitch mode", 0, 0, 1, edit_method=PilotingSettingsPitchModeValue_enum)

# Speed Settings commands
speedsettings_group_gen = gen.add_group("speedsettings")
# Set max vertical speed.
speedsettings_group_gen.add("SpeedSettingsMaxVerticalSpeedCurrent", double_t, 0, "Current max vertical speed in m/s", 0 , 0.0, 10.0)
# Set max rotation speed.
speedsettings_group_gen.add("SpeedSettingsMaxRotationSpeedCurrent", double_t, 0, "Current max yaw rotation speed in degree/s", 0 , 0, 900.0)
# Set the presence of hull protection.
SpeedSettingsHullProtectionPresent_enum = gen.enum([
    gen.const("SpeedSettingsHullProtectionPresent_OFF", int_t, 0, "Disabled"),
    gen.const("SpeedSettingsHullProtectionPresent_ON", int_t, 1, "Enabled"),
], "1 if present, 0 if not present")
speedsettings_group_gen.add("SpeedSettingsHullProtectionPresent", int_t, 0, "1 if present, 0 if not present", 0, 0, 1, edit_method=SpeedSettingsHullProtectionPresent_enum)
# Set outdoor mode.
SpeedSettingsOutdoorOutdoor_enum = gen.enum([
    gen.const("SpeedSettingsOutdoorOutdoor_OFF", int_t, 0, "Disabled"),
    gen.const("SpeedSettingsOutdoorOutdoor_ON", int_t, 1, "Enabled"),
], "1 if outdoor flight, 0 if indoor flight")
speedsettings_group_gen.add("SpeedSettingsOutdoorOutdoor", int_t, 0, "1 if outdoor flight, 0 if indoor flight", 0, 0, 1, edit_method=SpeedSettingsOutdoorOutdoor_enum)
# Set max pitch/roll rotation speed.
speedsettings_group_gen.add("SpeedSettingsMaxPitchRollRotationSpeedCurrent", double_t, 0, "Current max pitch/roll rotation speed in degree/s", 0 , 0, 900.0)

# Network settings commands
networksettings_group_gen = gen.add_group("networksettings")
# Select or auto-select channel of choosen band.
NetworkSettingsWifiSelectionType_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionType_auto", int_t, 0, "Auto selection"),
    gen.const("NetworkSettingsWifiSelectionType_manual", int_t, 1, "Manual selection"),
], "The type of wifi selection (auto, manual)")
networksettings_group_gen.add("NetworkSettingsWifiSelectionType", int_t, 0, "The type of wifi selection (auto, manual)", 0, 0, 1, edit_method=NetworkSettingsWifiSelectionType_enum)
NetworkSettingsWifiSelectionBand_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionBand_2_4ghz", int_t, 0, "2.4 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_5ghz", int_t, 1, "5 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_all", int_t, 2, "Both 2.4 and 5 GHz bands"),
], "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all")
networksettings_group_gen.add("NetworkSettingsWifiSelectionBand", int_t, 0, "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all", 0, 0, 2, edit_method=NetworkSettingsWifiSelectionBand_enum)
networksettings_group_gen.add("NetworkSettingsWifiSelectionChannel", int_t, 0, "The channel (not used in auto mode)", 0 , 0, 50)

# Photo settings chosen by the user
picturesettings_group_gen = gen.add_group("picturesettings")
# Set video stabilization mode.
PictureSettingsVideoStabilizationModeMode_enum = gen.enum([
    gen.const("PictureSettingsVideoStabilizationModeMode_roll_pitch", int_t, 0, "Video flat on roll and pitch"),
    gen.const("PictureSettingsVideoStabilizationModeMode_pitch", int_t, 1, "Video flat on pitch only"),
    gen.const("PictureSettingsVideoStabilizationModeMode_roll", int_t, 2, "Video flat on roll only"),
    gen.const("PictureSettingsVideoStabilizationModeMode_none", int_t, 3, "Video follows drone angles"),
], "Video stabilization mode")
picturesettings_group_gen.add("PictureSettingsVideoStabilizationModeMode", int_t, 0, "Video stabilization mode", 0, 0, 3, edit_method=PictureSettingsVideoStabilizationModeMode_enum)
# Set video recording mode.
PictureSettingsVideoRecordingModeMode_enum = gen.enum([
    gen.const("PictureSettingsVideoRecordingModeMode_quality", int_t, 0, "Maximize recording quality."),
    gen.const("PictureSettingsVideoRecordingModeMode_time", int_t, 1, "Maximize recording time."),
], "Video recording mode")
picturesettings_group_gen.add("PictureSettingsVideoRecordingModeMode", int_t, 0, "Video recording mode", 0, 0, 1, edit_method=PictureSettingsVideoRecordingModeMode_enum)
# Set video framerate.
PictureSettingsVideoFramerateFramerate_enum = gen.enum([
    gen.const("PictureSettingsVideoFramerateFramerate_24_FPS", int_t, 0, "23.976 frames per second."),
    gen.const("PictureSettingsVideoFramerateFramerate_25_FPS", int_t, 1, "25 frames per second."),
    gen.const("PictureSettingsVideoFramerateFramerate_30_FPS", int_t, 2, "29.97 frames per second."),
], "Video framerate")
picturesettings_group_gen.add("PictureSettingsVideoFramerateFramerate", int_t, 0, "Video framerate", 0, 0, 2, edit_method=PictureSettingsVideoFramerateFramerate_enum)
# Set video streaming and recording resolutions.
PictureSettingsVideoResolutionsType_enum = gen.enum([
    gen.const("PictureSettingsVideoResolutionsType_rec1080_stream480", int_t, 0, "1080p recording, 480p streaming."),
    gen.const("PictureSettingsVideoResolutionsType_rec720_stream720", int_t, 1, "720p recording, 720p streaming."),
], "Video streaming and recording resolutions")
picturesettings_group_gen.add("PictureSettingsVideoResolutionsType", int_t, 0, "Video streaming and recording resolutions", 0, 0, 1, edit_method=PictureSettingsVideoResolutionsType_enum)

# GPS settings
gpssettings_group_gen = gen.add_group("gpssettings")
# Set the preferred home type.\n Please note that this is only a preference. The actual type chosen is given by the event [HomeType](#1-31-2).\n You can get the currently available types with the event [HomeTypeAvailability](#1-31-1).
GPSSettingsHomeTypeType_enum = gen.enum([
    gen.const("GPSSettingsHomeTypeType_TAKEOFF", int_t, 0, "The drone will try to return to the take off position"),
    gen.const("GPSSettingsHomeTypeType_PILOT", int_t, 1, "The drone will try to return to the pilot position"),
    gen.const("GPSSettingsHomeTypeType_FOLLOWEE", int_t, 2, "The drone will try to return to the target of the current (or last) follow me"),
], "The type of the home position")
gpssettings_group_gen.add("GPSSettingsHomeTypeType", int_t, 0, "The type of the home position", 0, 0, 2, edit_method=GPSSettingsHomeTypeType_enum)
# Set the delay after which the drone will automatically try to return home after a disconnection.
gpssettings_group_gen.add("GPSSettingsReturnHomeDelayDelay", int_t, 0, "Delay in second", 0 , 0, 120)


exit(gen.generate(PACKAGE, "bebop_driver_nodelet", "BebopArdrone3"))
