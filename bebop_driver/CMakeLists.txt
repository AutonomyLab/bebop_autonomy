cmake_minimum_required(VERSION 2.8.3)
project(bebop_driver)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  bebop_msgs
  nodelet
  camera_info_manager
  image_transport
  nav_msgs
  roscpp
  std_msgs
  tf
  dynamic_reconfigure
  roslint
)

generate_dynamic_reconfigure_options(
  cfg/autogenerated/bebop_ardrone3.cfg
)

# Video decoding dependencies (libbebop)
find_package(PkgConfig REQUIRED)
pkg_check_modules(AVCODEC REQUIRED libavcodec)
pkg_check_modules(AVFORMAT REQUIRED libavformat)
pkg_check_modules(SWSCALE REQUIRED libswscale)

# TODO: Should we state all catkin depends?
catkin_package(
   INCLUDE_DIRS include
   LIBRARIES libbebop bebop_driver_nodelet
   CATKIN_DEPENDS bebop_msgs roscpp nodelet camera_info_manager image_transport nav_msgs std_msgs tf dynamic_reconfigure
   DEPENDS system_lib libavcodec libavformat libswscale
)

# roslint
set(ROSLINT_CPP_OPTS "--filter=-build/include")
roslint_cpp(
  src/bebop.cpp
  src/bebop_driver_node.cpp
  src/bebop_driver_nodelet.cpp
  src/bebop_video_decoder.cpp
  include/bebop_driver/bebop.h
  include/bebop_driver/bebop_driver_nodelet.h
  include/bebop_driver/bebop_video_decoder.h
)

###########
## Build ##
###########

# Build ARDroneSDK3 through their custom build manager (ARSDKBuildUtils)
# TODO: Replace ExternalProject with a catkin package wrapper or a cmake macro.
# the build time is unnecessarily long due to many git checkout ./SDK3Build.py performs.
include(ExternalProject)
ExternalProject_Add(ARSDKBuildUtils
    GIT_REPOSITORY https://github.com/ARDroneSDK3/ARSDKBuildUtils.git
    GIT_TAG ARSDK3_version_3_7_5
    PREFIX ${CATKIN_DEVEL_PREFIX}
    PATCH_COMMAND curl -s https://github.com/mani-monaj/ARSDKBuildUtils/commit/6c5b4186ab1d7cfd963b7dfa2070ece7650b2a5e.patch | git apply -v --index
    CONFIGURE_COMMAND echo "No configure"
    BUILD_COMMAND ./SDK3Build.py -t Unix
    INSTALL_COMMAND echo "No install"
    BUILD_IN_SOURCE 1
)

set(ARDRONESDK3_PATH "${CATKIN_DEVEL_PREFIX}/src/ARSDKBuildUtils/Targets/Unix/Install")

include_directories(
  ${catkin_INCLUDE_DIRS}
  include
  ${ARDRONESDK3_PATH}/include
  ${AVCODEC_INCLUDE_DIRS}
  ${AVFORMAT_INCLUDE_DIRS}
  ${SWSCALE_INCLUDE_DIRS}
)
link_directories(${ARDRONESDK3_PATH}/lib)

add_library(libbebop src/bebop.cpp src/bebop_video_decoder.cpp)
target_link_libraries(libbebop
  ${catkin_LIBRARIES}
  arsal
  arcontroller
  ardiscovery
  ${AVCODEC_LIBRARIES}
  ${AVFORMAT_LIBRARIES}
  ${SWSCALE_LIBRARIES}
)
add_dependencies(libbebop ARSDKBuildUtils)

add_library(bebop_driver_nodelet src/bebop_driver_nodelet.cpp)
target_link_libraries(bebop_driver_nodelet
  ${catkin_LIBRARIES}
  libbebop
)
add_dependencies(bebop_driver_nodelet ${PROJECT_NAME}_gencfg)

add_executable(bebop_driver_node src/bebop_driver_node.cpp)
target_link_libraries(bebop_driver_node
  ${catkin_LIBRARIES}
  libbebop
)
add_dependencies(bebop_driver_node ${PROJECT_NAME}_gencfg)


#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS bebop_autonomy bebop_autonomy_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

if(CATKIN_ENABLE_TESTING)
  find_package(rostest REQUIRED)
  add_rostest_gtest(bebop_itl_test test/bebop_itl_test.test test/bebop_itl_test.cpp)
  target_link_libraries(bebop_itl_test ${catkin_LIBRARIES})
endif()
